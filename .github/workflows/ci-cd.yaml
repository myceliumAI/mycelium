name: CI/CD Pipeline

# Add default permissions for all jobs
permissions: {}  # Default to no permissions

on:
  push:
    branches: [ '**' ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  REPOSITORY: myceliumai
  FRONTEND_IMAGE: myceliumai/frontend
  API_IMAGE: myceliumai/api
  KEYCLOAK_IMAGE: myceliumai/keycloak
  DB_IMAGE: myceliumai/database

jobs:
  changes:
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: read
      contents: read
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      api: ${{ steps.filter.outputs.api }}
      keycloak: ${{ steps.filter.outputs.keycloak }}
      database: ${{ steps.filter.outputs.database }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      
      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50
        id: filter
        with:
          filters: |
            frontend:
              - 'mycelium/**'
              - '.github/workflows/**'
            api:
              - 'backend/api/**'
              - '.github/workflows/**'
            keycloak:
              - 'backend/keycloak/**'
              - '.github/workflows/**'
            database:
              - 'backend/database/**'
              - '.github/workflows/**'

  frontend-tests:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'mycelium/yarn.lock'
      - name: Run checks
        working-directory: ./mycelium
        run: |
          yarn install
          yarn lint
          # Disabled until tests are configured in the frontend
          # yarn test

  api-tests:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      pull-requests: write
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      
      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install uv
        uses: astral-sh/setup-uv@4db96194c378173c656ce18a155ffc14a9fc4355
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Run tests
        working-directory: ./backend/api
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          ALLOWED_HOSTS: "*"
          ALLOWED_ORIGINS: "*"
          LOG_LEVEL: "INFO"
          TESTING: "1"
        run: |
          uv sync
          uv run ruff format . --check
          uv run ruff check .
          uv run pytest --cov=app --cov-report=xml --cov-report=term-missing \
            --cov-config=pyproject.toml \
            tests/

      - name: Handle Codecov
        if: always()
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./backend/api/coverage.xml
          fail_ci_if_error: false
          name: python-coverage
          verbose: true

  keycloak-tests:
    needs: changes
    if: ${{ needs.changes.outputs.keycloak == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Run shellcheck
        working-directory: ./backend/keycloak
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          shellcheck scripts/*.sh

  security:
    name: Security Checks
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
      - uses: github/codeql-action/upload-sarif@cdcdbb579706841c47f7063dda365e292e5cad7a
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

  build:
    runs-on: ubuntu-22.04
    needs: [changes, security, frontend-tests, api-tests, keycloak-tests]
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: frontend
            context: ./mycelium
            output_key: frontend
          - service: api
            context: ./backend/api
            output_key: api
          - service: keycloak
            context: ./backend/keycloak
            output_key: keycloak
          - service: database
            context: ./backend/database
            output_key: database
    permissions:
      contents: read
    steps:
      - name: Check if should build
        id: should_build
        run: |
          if [[ 
            "${{ github.event_name }}" == "push" && 
            "${{ github.ref }}" == "refs/heads/main" && 
            "${{ needs.changes.outputs[matrix.output_key] }}" == "true" 
          ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        if: steps.should_build.outputs.run == 'true'

      - uses: docker/setup-buildx-action@0d103c3126aa41d772a8362f6aa67afac040f80c
        if: steps.should_build.outputs.run == 'true'

      - uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        if: steps.should_build.outputs.run == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/metadata-action@dbef88086f6cef02e264edb7dbf63250c17cef6c
        if: steps.should_build.outputs.run == 'true'
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825
        if: steps.should_build.outputs.run == 'true'
        with:
          context: ${{ matrix.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.service }}:buildcache,mode=max

