name: CI/CD Pipeline

# Add default permissions for all jobs
permissions: {}  # Default to no permissions

on:
  push:
    branches: [ '**' ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  REPOSITORY: myceliumai
  FRONTEND_IMAGE: myceliumai/frontend
  API_IMAGE: myceliumai/api
  KEYCLOAK_IMAGE: myceliumai/keycloak
  DB_IMAGE: myceliumai/database

jobs:
  changes:
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: read
      contents: read
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      api: ${{ steps.filter.outputs.api }}
      keycloak: ${{ steps.filter.outputs.keycloak }}
      database: ${{ steps.filter.outputs.database }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      
      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50
        id: filter
        with:
          filters: |
            frontend:
              - 'mycelium/**'
              - '.github/workflows/**'
            api:
              - 'backend/api/**'
              - '.github/workflows/**'
            keycloak:
              - 'backend/keycloak/**'
              - '.github/workflows/**'
            database:
              - 'backend/database/**'
              - '.github/workflows/**'

  frontend-checks:
    needs: [changes]
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    name: Frontend Checks
    runs-on: ubuntu-22.04
    permissions:
      contents: read      # Only needs to read repository contents
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      
      - name: Set up Node.js
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'mycelium/yarn.lock'

      - name: Install dependencies
        working-directory: ./mycelium
        run: yarn install

      - name: Run linting
        working-directory: ./mycelium
        run: yarn lint

      - name: Run tests
        working-directory: ./mycelium
        run: yarn test

  keycloak-checks:
    needs: [changes]
    if: ${{ needs.changes.outputs.keycloak == 'true' }}
    name: Keycloak Checks
    runs-on: ubuntu-22.04
    permissions:
      contents: read      # Only needs to read repository contents
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      
      - name: Lint shell scripts
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          shellcheck backend/keycloak/scripts/*.sh

  api-checks:
    needs: [changes]
    if: ${{ needs.changes.outputs.api == 'true' }}
    name: API Checks
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      pull-requests: write  # Needed for code coverage comments
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9  # v4.1.1
    
    - name: Set up Python
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
      with:
        python-version: '3.10'
        cache: 'poetry'
        cache-dependency-path: 'backend/api/poetry.lock'

    - name: Install Poetry
      run: curl -sSL https://install.python-poetry.org | python3 -
      
    - name: Install dependencies
      working-directory: ./backend/api
      run: poetry install
      
    - name: Run checks
      working-directory: ./backend/api
      run: |
        poetry run ruff format . --check
        poetry run ruff check .

    - name: Run unit tests
      env:
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_DB: test_db
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        ALLOWED_HOSTS: "*"
        ALLOWED_ORIGINS: "*"
        LOG_LEVEL: "INFO"
        TESTING: "1"
      run: |
        cd backend/api
        poetry run python -m unittest tests/tools_test.py -v
        
    - name: Run pytest with coverage
      env:
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_DB: test_db
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        ALLOWED_HOSTS: "*"
        ALLOWED_ORIGINS: "*"
        LOG_LEVEL: "INFO"
        TESTING: "1"
      working-directory: ./backend/api
      run: poetry run pytest --cov=app --cov-report=xml --cov-report=term-missing tests/
        
    - name: Handle Codecov
      if: always()  # Run even if tests fail
      uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457
      with:
        file: ./backend/api/coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ${{ github.repository }}
        directory: ./backend/api/
        comment: ${{ github.event.pull_request != null }}  # Enable comments only on PRs
        verbose: true

  security:
    name: Security Checks
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9

      # Scan for vulnerabilities including dependencies
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'  # Enable vulnerability scanning for dependencies

      # Upload scan results
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@cdcdbb579706841c47f7063dda365e292e5cad7a
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

  build:
    strategy:
      matrix:
        include:
          - name: frontend
            image: ${{ env.FRONTEND_IMAGE }}
            context: ./mycelium
            needs: frontend-checks
          - name: api
            image: ${{ env.API_IMAGE }}
            context: ./backend/api
            needs: api-checks
          - name: keycloak
            image: ${{ env.KEYCLOAK_IMAGE }}
            context: ./backend/keycloak
            needs: keycloak-checks
          - name: database
            image: ${{ env.DB_IMAGE }}
            context: ./backend/database
    name: Build ${{ matrix.name }} Image
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changes.outputs[format('{0}', matrix.name)] == 'true' }}
    needs:
      - changes
      - security
      - ${{ matrix.needs }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - uses: docker/setup-buildx-action@0d103c3126aa41d772a8362f6aa67afac040f80c
      - uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/metadata-action@dbef88086f6cef02e264edb7dbf63250c17cef6c
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image }}
          tags: |
            type=raw,value=latest
            type=sha,format=long
      - uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825
        with:
          context: ${{ matrix.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ matrix.image }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ matrix.image }}:buildcache,mode=max

