name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REPOSITORY: myceliumai/mycelium
  FRONTEND_IMAGE: myceliumai/mycelium/frontend
  BACKEND_IMAGE: myceliumai/mycelium/backend
  KEYCLOAK_IMAGE: myceliumai/mycelium/keycloak

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      keycloak: ${{ steps.filter.outputs.keycloak }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'mycelium/**'
              - '.github/workflows/**'
            backend:
              - 'backend/api/**'
              - '.github/workflows/**'
            keycloak:
              - 'backend/keycloak/**'
              - '.github/workflows/**'

  frontend-checks:
    needs: [changes]
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    name: Frontend Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'mycelium/yarn.lock'

      - name: Install dependencies
        working-directory: ./mycelium
        run: yarn install

      - name: Run linting
        working-directory: ./mycelium
        run: yarn lint || true

      - name: Run tests
        working-directory: ./mycelium
        run: yarn test || true

  backend-checks:
    needs: [changes]
    if: ${{ needs.changes.outputs.backend == 'true' }}
    name: Backend Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        working-directory: ./backend/api
        run: poetry install

      - name: Run tests
        working-directory: ./backend/api
        run: poetry run pytest || true

  keycloak-checks:
    needs: [changes]
    if: ${{ needs.changes.outputs.keycloak == 'true' }}
    name: Keycloak Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Lint shell scripts
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          shellcheck backend/keycloak/scripts/*.sh

  build:
    name: Build Images
    needs: [changes, frontend-checks, backend-checks, keycloak-checks]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata for Frontend
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build Frontend
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ./mycelium
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:buildcache
            type=registry,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:buildcache,mode=max

      - name: Generate Docker metadata for Backend
        if: ${{ needs.changes.outputs.backend == 'true' }}
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build Backend
        if: ${{ needs.changes.outputs.backend == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ./backend/api
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:buildcache
            type=registry,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:buildcache,mode=max

      - name: Generate Docker metadata for Keycloak
        if: ${{ needs.changes.outputs.keycloak == 'true' }}
        id: meta-keycloak
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.KEYCLOAK_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build Keycloak
        if: ${{ needs.changes.outputs.keycloak == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ./backend/keycloak
          push: true
          tags: ${{ steps.meta-keycloak.outputs.tags }}
          labels: ${{ steps.meta-keycloak.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.KEYCLOAK_IMAGE }}:buildcache
            type=registry,ref=${{ env.REGISTRY }}/${{ env.KEYCLOAK_IMAGE }}:latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.KEYCLOAK_IMAGE }}:buildcache,mode=max
