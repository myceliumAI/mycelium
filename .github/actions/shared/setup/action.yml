name: 'Setup Test Environment'
description: 'Sets up the environment for testing based on service type'

inputs:
  service-type:
    description: 'Type of service (node/python/java)'
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      if: inputs.service-type == 'node'
      uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8  # v4.0.1
      with:
        node-version: '20'

    - name: Setup Python
      if: inputs.service-type == 'python'
      uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c  # v5.0.0
      with:
        python-version: '3.11'

    - name: Install Poetry
      if: inputs.service-type == 'python'
      shell: bash
      run: |
        echo "üì¶ Installing Poetry"
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Setup Java
      if: inputs.service-type == 'java'
      uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0  # v4.0.1
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Check Working Directory (Node)
      if: inputs.service-type == 'node'
      shell: bash
      run: |
        WORK_DIR="./mycelium"
        echo "üîç Checking Node.js project in $WORK_DIR"
        if [ ! -d "$WORK_DIR" ]; then
          echo "‚ùå Directory $WORK_DIR not found"
          exit 1
        fi
        echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV

    - name: Check Working Directory (Python)
      if: inputs.service-type == 'python'
      shell: bash
      run: |
        WORK_DIR="./backend/api"
        echo "üîç Checking Python project in $WORK_DIR"
        if [ ! -d "$WORK_DIR" ]; then
          echo "‚ùå Directory $WORK_DIR not found"
          exit 1
        fi
        echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV

    - name: Check Working Directory (Java)
      if: inputs.service-type == 'java'
      shell: bash
      run: |
        WORK_DIR="./backend/keycloak"
        echo "üîç Checking Java project in $WORK_DIR"
        if [ ! -d "$WORK_DIR" ]; then
          echo "‚ùå Directory $WORK_DIR not found"
          exit 1
        fi
        echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV

    - name: Install Dependencies (Node)
      if: inputs.service-type == 'node'
      shell: bash
      run: |
        cd $WORK_DIR
        echo "üì¶ Installing Node.js dependencies"
        
        # Configuration de Yarn moderne
        corepack enable
        yarn set version stable
        
        if [ -f "package.json" ]; then
          # Cr√©er .yarnrc.yml si n√©cessaire
          if [ ! -f ".yarnrc.yml" ]; then
            echo "nodeLinker: node-modules" > .yarnrc.yml
          fi
          
          # Installation des d√©pendances
          if [ ! -f "yarn.lock" ]; then
            echo "‚ö†Ô∏è No yarn.lock found, creating one..."
            yarn install
          else
            echo "‚úÖ Using existing yarn.lock"
            # Utiliser --immutable au lieu de --frozen-lockfile
            YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install
          fi
        else
          echo "‚ùå No package.json found in $WORK_DIR"
          exit 1
        fi

    - name: Install Dependencies (Python)
      if: inputs.service-type == 'python'
      shell: bash
      run: |
        cd $WORK_DIR
        echo "üì¶ Installing Python dependencies"
        if [ -f "pyproject.toml" ]; then
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-ansi
        else
          echo "‚ùå No pyproject.toml found in $WORK_DIR"
          exit 1
        fi

    - name: Install Dependencies (Java)
      if: inputs.service-type == 'java'
      shell: bash
      run: |
        cd $WORK_DIR
        echo "üì¶ Installing Java dependencies"
        if [ -f "pom.xml" ]; then
          ./mvnw install -DskipTests
        else
          echo "‚ùå No pom.xml found in $WORK_DIR"
          exit 1
        fi 